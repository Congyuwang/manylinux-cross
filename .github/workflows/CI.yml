on:
  push:
  pull_request:

name: Build

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [
          { arch: "aarch64", manylinux: "manylinux2014" },
          { arch: "armv7l", manylinux: "manylinux2014" },
          { arch: "s390x", manylinux: "manylinux2014" },
          { arch: "ppc64le", manylinux: "manylinux_2_24" },
        ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ matrix.platform.arch }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform.arch }}-buildx-
      - name: Build amd64 image
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64
          file: ${{ matrix.platform.arch }}.Dockerfile
          tags: messense/${{ matrix.platform.manylinux }}-cross:${{ matrix.platform.arch }}-amd64
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      - name: Move cache
        run: |
          # Temp fix
          # https://github.com/docker/build-push-action/issues/252
          # https://github.com/moby/buildkit/issues/1896
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Build and push multiarch image
        if: github.ref == 'refs/heads/master'
        env:
          ARCH: ${{ matrix.platform.arch }}
          NAME: ${{ matrix.platform.manylinux }}
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push messense/$NAME-cross:$ARCH-amd64

          echo "image: messense/$NAME-cross:$ARCH
          manifests:
            - image: messense/$NAME-cross:$ARCH-amd64
              platform:
                architecture: amd64
                os: linux
            - image: messense/$NAME-cross:$ARCH-arm64
              platform:
                architecture: arm64
                os: linux
          " > manifest.yaml

          curl -sqL -o manifest-tool https://github.com/estesp/manifest-tool/releases/download/v1.0.3/manifest-tool-linux-amd64
          chmod +x manifest-tool
          ./manifest-tool push from-spec manifest.yaml
      - name: Alias armv7l to armv7
        if: matrix.arch == 'armv7l' && github.ref == 'refs/heads/master'
        run: |
          echo "image: messense/$NAME-cross:armv7
          manifests:
            - image: messense/$NAME-cross:armv7l-amd64
              platform:
                architecture: amd64
                os: linux
            - image: messense/$NAME-cross:armv7l-arm64
              platform:
                architecture: arm64
                os: linux
          " > manifest.yaml

          curl -sqL -o manifest-tool https://github.com/estesp/manifest-tool/releases/download/v1.0.3/manifest-tool-linux-amd64
          chmod +x manifest-tool
          ./manifest-tool push from-spec manifest.yaml

  test-maturin:
    name: Test maturin
    runs-on: ubuntu-latest
    # needs: [ build ]
    strategy:
      matrix:
        python: [
          { version: '3.6', abi: 'm' },
          { version: '3.7', abi: 'm' },
          { version: '3.8', abi: '' },
          { version: '3.9', abi: '' },
        ]
        platform: [
          { target: "aarch64-unknown-linux-gnu", arch: "aarch64" },
          { target: "armv7-unknown-linux-gnueabihf", arch: "armv7" },
        ]
    container:
      image: docker://messense/manylinux2014-cross:${{ matrix.platform.arch }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.platform.target }}
      - name: Build Wheels
        shell: bash -e {0}
        run: |
          export PYO3_CROSS_PYTHON_VERSION=${{ matrix.python.version }}
          PY_VER="${PYO3_CROSS_PYTHON_VERSION//./}"
          PY_ABI=${{ matrix.python.abi }}
          PY_TAG="cp$PY_VER-cp$PY_VER$PY_ABI"
          export PYO3_CROSS_LIB_DIR=/opt/python/$PY_TAG/lib
          maturin build -i "python$PYO3_CROSS_PYTHON_VERSION" --release --out dist --no-sdist --target ${{ matrix.platform.target }} -m pyo3-test/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels-maturin
          path: dist

  test-maturin-wheels:
    name: Test maturin built wheels
    runs-on: ubuntu-latest
    needs: [ test-maturin ]
    strategy:
      matrix:
        arch: ['aarch64', 'armv7']
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels-maturin
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Install built wheel
        with:
          arch: ${{ matrix.arch }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}:/io"
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip software-properties-common
            pip3 install -U pip
            add-apt-repository ppa:deadsnakes/ppa
            apt-get update
            apt-get install -y python3.6 python3.7 python3.9
          run: |
            for VER in 3.6 3.7 3.8 3.9; do
              PYTHON="python$VER"
              $PYTHON -m pip install pyo3-test --no-index --find-links /io --force-reinstall
              $PYTHON -c 'import pyo3_test; assert pyo3_test.fourtytwo == 42'
            done

  test-setuptools-rust:
    name: Test setuptools-rust
    runs-on: ubuntu-latest
    # needs: [ build ]
    strategy:
      matrix:
        python: [
          { version: '3.6', name: 'cp36-cp36m' },
          { version: '3.7', name: 'cp37-cp37m' },
          { version: '3.8', name: 'cp38-cp38' },
          { version: '3.9', name: 'cp39-cp39' },
        ]
        platform: [
          { target: "aarch64-unknown-linux-gnu", arch: "aarch64" },
          { target: "armv7-unknown-linux-gnueabihf", arch: "armv7l" },
        ]
    container:
      image: docker://messense/manylinux2014-cross:${{ matrix.platform.arch }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.platform.target }}
      - name: Build Wheels
        env:
          PLAT_NAME: manylinux2014_${{ matrix.platform.arch }}
        shell: bash -e {0}
        run: |
          PYTHON=python${{ matrix.python.version }}
          $PYTHON -m pip install 'crossenv>=1.1.2'
          cd pyo3-test
          $PYTHON -m crossenv /opt/python/${{ matrix.python.name }}/bin/python3 --cc $TARGET_CC --cxx $TARGET_CXX --sysroot $TARGET_SYSROOT --env LIBRARY_PATH= venv
          . venv/bin/activate
          pip install -U pip wheel setuptools-rust
          export PYO3_CROSS_LIB_DIR="$PWD/venv/lib"
          python setup.py bdist_wheel --plat-name "$PLAT_NAME" --dist-dir ../dist/
          ls -lrth ../dist/
      - name: Audit Wheel Symbols
        shell: bash -e {0}
        run: |
          for whl in dist/pyo3_test*.whl; do
            auditwheel-symbols "$whl"
          done
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels-setuptools-rust
          path: dist

  test-setuptools-rust-wheels:
    name: Test setuptools-rust built wheels
    runs-on: ubuntu-latest
    needs: [ test-setuptools-rust ]
    strategy:
      matrix:
        arch: ['aarch64', 'armv7']
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels-setuptools-rust
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Install built wheel
        with:
          arch: ${{ matrix.arch }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          dockerRunArgs: |
            --volume "${PWD}:/io"
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip software-properties-common
            pip3 install -U pip
            add-apt-repository ppa:deadsnakes/ppa
            apt-get update
            apt-get install -y python3.6 python3.7 python3.9
          run: |
            for VER in 3.6 3.7 3.8 3.9; do
              PYTHON="python$VER"
              $PYTHON -m pip install pyo3-test --no-index --find-links /io --force-reinstall
              $PYTHON -c 'import pyo3_test; assert pyo3_test.fourtytwo == 42'
            done
