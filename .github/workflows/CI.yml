on:
  push:
  pull_request:

name: Build

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [aarch64, armv7l]
    steps:
      - uses: actions/checkout@v2
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ matrix.arch }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-buildx-
      - name: Pull manylinux2014_aarch64 image
        if: matrix.arch == 'aarch64'
        run: docker pull quay.io/pypa/manylinux2014_aarch64
      - name: Build amd64 image
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64
          file: ${{ matrix.arch }}.Dockerfile
          tags: messense/manylinux-2014-cross:${{ matrix.arch }}-amd64
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      - name: Move cache
        run: |
          # Temp fix
          # https://github.com/docker/build-push-action/issues/252
          # https://github.com/moby/buildkit/issues/1896
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Publish to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Login without echoing token, just in case
          BASH_FLAGS="$-"
          set +x
          echo "$GITHUB_TOKEN" | docker login docker.pkg.github.com \
            -u "$GITHUB_ACTOR" \
            --password-stdin
          set "$BASH_FLAGS"
          # Push
          PACKAGE_REGISTRY=docker.pkg.github.com/messense/manylinux2014-cross-arm/manylinux2014-cross:${{ matrix.arch }}
          docker tag messense/manylinux2014-cross:${{ matrix.arch }}-amd64 "$PACKAGE_REGISTRY"
          docker push "$PACKAGE_REGISTRY"
      - name: Build and push multiarch image
        if: github.ref == 'refs/heads/master'
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push messense/manylinux2014-cross:$ARCH-amd64

          echo "image: messense/manylinux2014-cross:$ARCH
          manifests:
            - image: messense/manylinux2014-cross:$ARCH-amd64
              platform:
                architecture: amd64
                os: linux
            - image: messense/manylinux2014-cross:$ARCH-arm64
              platform:
                architecture: arm64
                os: linux
          " > manifest.yaml

          curl -sqL -o manifest-tool https://github.com/estesp/manifest-tool/releases/download/v1.0.3/manifest-tool-linux-amd64
          chmod +x manifest-tool
          ./manifest-tool push from-spec manifest.yaml
      - name: Alias armv7l to armv7
        if: matrix.arch == 'armv7l'
        run: |
          echo "image: messense/manylinux2014-cross:armv7
          manifests:
            - image: messense/manylinux2014-cross:armv7l-amd64
              platform:
                architecture: amd64
                os: linux
            - image: messense/manylinux2014-cross:armv7l-arm64
              platform:
                architecture: arm64
                os: linux
          " > manifest.yaml

          curl -sqL -o manifest-tool https://github.com/estesp/manifest-tool/releases/download/v1.0.3/manifest-tool-linux-amd64
          chmod +x manifest-tool
          ./manifest-tool push from-spec manifest.yaml

  test:
    name: Test
    runs-on: ubuntu-latest
    # needs: [ build ]
    strategy:
      matrix:
        python: [
          { version: '3.6', abi: 'm' },
          { version: '3.7', abi: 'm' },
          { version: '3.8', abi: '' },
          { version: '3.9', abi: '' },
        ]
        platform: [
          { target: "aarch64-unknown-linux-gnu", arch: "aarch64" },
          { target: "armv7-unknown-linux-gnueabihf", arch: "armv7l" },
        ]
    steps:
      - uses: actions/checkout@v2
      - name: Build Wheels
        run: |
          echo 'curl -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          source ~/.cargo/env
          rustup target add ${{ matrix.platform.target }}
          export PYO3_CROSS_PYTHON_VERSION=${{ matrix.python.version }}
          PY_VER="${PYO3_CROSS_PYTHON_VERSION//./}"
          PY_ABI=${{ matrix.python.abi }}
          PY_TAG="cp$PY_VER-cp$PY_VER$PY_ABI"
          export PYO3_CROSS_LIB_DIR=/opt/python/$PY_TAG/lib
          maturin build -i "python$PYO3_CROSS_PYTHON_VERSION" --release --out dist --no-sdist --target ${{ matrix.platform.target }} -m pyo3-test/Cargo.toml
          ' > build-wheel.sh

          docker run --rm -v "$PWD":/io -w /io messense/manylinux2014-cross:${{ matrix.platform.arch }} bash build-wheel.sh
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist
