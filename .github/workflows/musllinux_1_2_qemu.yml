on:
  workflow_dispatch:

name: Build musllinux_1_2 ARM64 with QEMU

jobs:
  build:
    name: Build - ${{ matrix.os.arch }} - ${{ matrix.platform.manylinux }}_${{ matrix.platform.arch }}
    runs-on: ${{ matrix.os.label }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - arch: 'arm64'
            label: ['ubuntu-latest']
        platform: [
          # musllinux
          { arch: "x86_64", manylinux: "musllinux_1_2" },
          { arch: "i686", manylinux: "musllinux_1_2" },
          { arch: "aarch64", manylinux: "musllinux_1_2" },
          { arch: "armv7l", manylinux: "musllinux_1_2" },
        ]
    steps:
      - uses: actions/checkout@v2
      - uses: dbhi/qus/action@main
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build image
        uses: docker/build-push-action@v2
        with:
          platforms: linux/${{ matrix.os.arch }}
          context: ${{ matrix.platform.manylinux }}/${{ matrix.platform.arch }}
          file: ${{ matrix.platform.manylinux }}/${{ matrix.platform.arch }}/Dockerfile
          tags: messense/${{ matrix.platform.manylinux }}-cross:${{ matrix.platform.arch }}-${{ matrix.os.arch }}
          load: true
          cache-from: type=registry,ref=messense/${{ matrix.platform.manylinux }}-cross:${{ matrix.platform.arch }}-${{ matrix.os.arch }}-buildcache
          cache-to: type=registry,ref=messense/${{ matrix.platform.manylinux }}-cross:${{ matrix.platform.arch }}-${{ matrix.os.arch }}-buildcache,mode=max
      - name: Verify Image
        run: |
          set -ex
          docker run --rm messense/${{ matrix.platform.manylinux }}-cross:${{ matrix.platform.arch }}-${{ matrix.os.arch }} \
            bash -c 'pip3 --version'
          docker run --rm messense/${{ matrix.platform.manylinux }}-cross:${{ matrix.platform.arch }}-${{ matrix.os.arch }} \
            bash -c 'for VER in 3.6 3.7 3.8 3.9 3.10; do "python$VER" -m pip --version || exit 1; done'
          docker run --rm messense/${{ matrix.platform.manylinux }}-cross:${{ matrix.platform.arch }}-${{ matrix.os.arch }} \
            bash -c 'for VER in 3.7 3.8 3.9; do "pypy$VER" -m pip --version || exit 1; done'
      - name: Build and push multiarch image
        env:
          ARCH: ${{ matrix.platform.arch }}
          NAME: ${{ matrix.platform.manylinux }}
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push messense/$NAME-cross:$ARCH-${{ matrix.os.arch }}

          echo "image: messense/$NAME-cross:$ARCH
          manifests:
            - image: messense/$NAME-cross:$ARCH-amd64
              platform:
                architecture: amd64
                os: linux
            - image: messense/$NAME-cross:$ARCH-arm64
              platform:
                architecture: arm64
                os: linux
          " > manifest.yaml

          curl -sqL -o manifest-tool https://github.com/estesp/manifest-tool/releases/download/v1.0.3/manifest-tool-linux-${{ matrix.os.arch }}
          chmod +x manifest-tool
          ./manifest-tool push from-spec manifest.yaml || exit 0
      - name: Alias armv7l to armv7
        env:
          NAME: ${{ matrix.platform.manylinux }}
        run: |
          echo "image: messense/$NAME-cross:armv7
          manifests:
            - image: messense/$NAME-cross:armv7l-amd64
              platform:
                architecture: amd64
                os: linux
            - image: messense/$NAME-cross:armv7l-arm64
              platform:
                architecture: arm64
                os: linux
          " > manifest.yaml

          curl -sqL -o manifest-tool https://github.com/estesp/manifest-tool/releases/download/v1.0.3/manifest-tool-linux-${{ matrix.os.arch }}
          chmod +x manifest-tool
          ./manifest-tool push from-spec manifest.yaml
