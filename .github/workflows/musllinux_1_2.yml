on:
  pull_request_target:
    types:
      - labeled
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

name: Build - musllinux_1_2

jobs:
  start-runner:
    if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.pull_request.labels.*.name, 'musllinux_1_2') || contains(github.event.pull_request.labels.*.name, 'musllinux') }}
    name: Start self-hosted ECS runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ecs-runner.outputs.label }}
      ecs-instance-id: ${{ steps.start-ecs-runner.outputs.ecs-instance-id }}
    steps:
      - uses: actions/checkout@v2
      - name: Start ECS runner
        id: start-ecs-runner
        uses: messense/huaweicloud-github-runner@main
        with:
          mode: start
          count: 4
          github-token: ${{ secrets.GH_PAT }}
          huawei-cloud-ak: ${{ secrets.HUAWEI_CLOUD_AK }}
          huawei-cloud-sk: ${{ secrets.HUAWEI_CLOUD_SK }}
          project-id: ${{ secrets.PROJECT_ID }}
          availability-zone: ap-southeast-1b
          ecs-image-id: 3021e45a-5c5b-47ae-920d-2a240d3f26d9
          ecs-instance-type: kc1.large.2
          vpc-id: ${{ secrets.VPC_ID }}
          subnet-id: ${{ secrets.SUBNET_ID }}
          security-group-id: ${{ secrets.SECURITY_GROUP_ID }}

  build:
    if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.pull_request.labels.*.name, 'musllinux_1_2') || contains(github.event.pull_request.labels.*.name, 'musllinux') }}
    name: Build - ${{ matrix.os.arch }} - ${{ matrix.platform.manylinux }}_${{ matrix.platform.arch }}
    needs: start-runner
    runs-on: ${{ matrix.os.label }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - arch: 'amd64'
            label: ['ubuntu-latest']
          - arch: 'arm64'
            label: ${{ needs.start-runner.outputs.label }}
        platform: [
          { arch: "x86_64", manylinux: "musllinux_1_2" },
          { arch: "i686", manylinux: "musllinux_1_2" },
          { arch: "aarch64", manylinux: "musllinux_1_2" },
          { arch: "armv7l", manylinux: "musllinux_1_2" },
        ]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build image
        uses: docker/build-push-action@v2
        with:
          platforms: linux/${{ matrix.os.arch }}
          context: ${{ matrix.platform.manylinux }}/${{ matrix.platform.arch }}
          file: ${{ matrix.platform.manylinux }}/${{ matrix.platform.arch }}/Dockerfile
          tags: messense/${{ matrix.platform.manylinux }}-cross:${{ matrix.platform.arch }}-${{ matrix.os.arch }}
          load: true
          cache-from: type=registry,ref=messense/${{ matrix.platform.manylinux }}-cross:${{ matrix.platform.arch }}-${{ matrix.os.arch }}-buildcache
          cache-to: type=registry,ref=messense/${{ matrix.platform.manylinux }}-cross:${{ matrix.platform.arch }}-${{ matrix.os.arch }}-buildcache,mode=max
      - name: Verify Image
        run: |
          docker run --rm messense/${{ matrix.platform.manylinux }}-cross:${{ matrix.platform.arch }}-${{ matrix.os.arch }} \
            bash -c 'for VER in 3.6 3.7 3.8 3.9 3.10 3.11; do "python$VER" -m pip --version || exit 1; done'
      - name: Build and push multiarch image
        env:
          ARCH: ${{ matrix.platform.arch }}
          NAME: ${{ matrix.platform.manylinux }}
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push messense/$NAME-cross:$ARCH-${{ matrix.os.arch }}

          echo "image: messense/$NAME-cross:$ARCH
          manifests:
            - image: messense/$NAME-cross:$ARCH-amd64
              platform:
                architecture: amd64
                os: linux
            - image: messense/$NAME-cross:$ARCH-arm64
              platform:
                architecture: arm64
                os: linux
          " > manifest.yaml

          curl -sqL -o manifest-tool https://github.com/estesp/manifest-tool/releases/download/v1.0.3/manifest-tool-linux-${{ matrix.os.arch }}
          chmod +x manifest-tool
          ./manifest-tool push from-spec manifest.yaml || exit 0
      - name: Alias armv7l to armv7
        if: matrix.platform.arch == 'armv7l'
        env:
          NAME: ${{ matrix.platform.manylinux }}
        run: |
          echo "image: messense/$NAME-cross:armv7
          manifests:
            - image: messense/$NAME-cross:armv7l-amd64
              platform:
                architecture: amd64
                os: linux
            - image: messense/$NAME-cross:armv7l-arm64
              platform:
                architecture: arm64
                os: linux
          " > manifest.yaml

          curl -sqL -o manifest-tool https://github.com/estesp/manifest-tool/releases/download/v1.0.3/manifest-tool-linux-${{ matrix.os.arch }}
          chmod +x manifest-tool
          ./manifest-tool push from-spec manifest.yaml

  stop-runner:
    name: Stop self-hosted ECS runner
    needs: [start-runner, build]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v2
      - name: Stop ECS runner
        if: ${{ needs.start-runner.outputs.ecs-instance-id }}
        uses: messense/huaweicloud-github-runner@main
        with:
          mode: stop
          github-token: ${{ secrets.GH_PAT }}
          huawei-cloud-ak: ${{ secrets.HUAWEI_CLOUD_AK }}
          huawei-cloud-sk: ${{ secrets.HUAWEI_CLOUD_SK }}
          project-id: ${{ secrets.PROJECT_ID }}
          availability-zone: ap-southeast-1b
          label: ${{ needs.start-runner.outputs.label }}
          ecs-instance-id: ${{ needs.start-runner.outputs.ecs-instance-id }}
